use std::fmt;

impl fmt::Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[derive(Debug)]
pub enum Opcode {
    NIMP(u8),

    NOP,
    LXIB,
    STAXB,
    INXB,
    INRB,
    DCRB,
    MVIB,
    RLC,

    DADB,
    LDAXB,
    DCXB,
    INRC,
    DCRC,
    MVIC,
    RRC,

    LXID,
    STAXD,
    INXD,
    INRD,
    DCRD,
    MVID,
    RAL,

    DADD,
    LDAXD,
    DCXD,
    INRE,
    DCRE,
    MVIE,
    RAR,

    LXIH,
    SHLD,
    INXH,
    INRH,
    DCRH,
    MVIH,
    DAA,

    DADH,
    LHLD,
    DCXH,
    INRL,
    DCRL,
    MVIL,
    CMA,

    LXISP,
    STA,
    INXSP,
    INRM,
    DCRM,
    MVIM,
    STC,

    DADSP,
    LDA,
    DCXSP,
    INRA,
    DCRA,
    MVIA,
    CMC,

    MOVBB,
    MOVBC,
    MOVBD,
    MOVBE,
    MOVBH,
    MOVBL,
    MOVBM,
    MOVBA,

    MOVCB,
    MOVCC,
    MOVCD,
    MOVCE,
    MOVCH,
    MOVCL,
    MOVCM,
    MOVCA,

    MOVDB,
    MOVDC,
    MOVDD,
    MOVDE,
    MOVDH,
    MOVDL,
    MOVDM,
    MOVDA,

    MOVEB,
    MOVEC,
    MOVED,
    MOVEE,
    MOVEH,
    MOVEL,
    MOVEM,
    MOVEA,

    MOVHB,
    MOVHC,
    MOVHD,
    MOVHE,
    MOVHH,
    MOVHL,
    MOVHM,
    MOVHA,

    MOVLB,
    MOVLC,
    MOVLD,
    MOVLE,
    MOVLH,
    MOVLL,
    MOVLM,
    MOVLA,

    MOVMB,
    MOVMC,
    MOVMD,
    MOVME,
    MOVMH,
    MOVML,
    HLT,
    MOVMA,

    MOVAB,
    MOVAC,
    MOVAD,
    MOVAE,
    MOVAH,
    MOVAL,
    MOVAM,
    MOVAA,

    ADDB,
    ADDC,
    ADDD,
    ADDE,
    ADDH,
    ADDL,
    ADDM,
    ADDA,

    ADCB,
    ADCC,
    ADCD,
    ADCE,
    ADCH,
    ADCL,
    ADCM,
    ADCA,

    SUBB,
    SUBC,
    SUBD,
    SUBE,
    SUBH,
    SUBL,
    SUBM,
    SUBA,

    SBBB,
    SBBC,
    SBBD,
    SBBE,
    SBBH,
    SBBL,
    SBBM,
    SBBA,

    ANAB,
    ANAC,
    ANAD,
    ANAE,
    ANAH,
    ANAL,
    ANAM,
    ANAA,

    XRAB,
    XRAC,
    XRAD,
    XRAE,
    XRAH,
    XRAL,
    XRAM,
    XRAA,

    ORAB,
    ORAC,
    ORAD,
    ORAE,
    ORAH,
    ORAL,
    ORAM,
    ORAA,

    CMPB,
    CMPC,
    CMPD,
    CMPE,
    CMPH,
    CMPL,
    CMPM,
    CMPA,

    RNZ,
    POPB,
    JNZ,
    JMP,
    CNZ,
    PUSHB,
    ADI,
    RST0,

    RZ,
    RET,
    JZ,
    CZ,
    CALL,
    ACI,
    RST1,

    RNC,
    POPD,
    JNC,
    OUT,
    CNC,
    PUSHD,
    SUI,
    RST2,

    RC,
    JC,
    IN,
    CC,
    SBI,
    RST3,

    RPO,
    POPH,
    JPO,
    XTHL,
    CPO,
    PUSHH,
    ANI,
    RST4,

    RPE,
    PCHL,
    JPE,
    XCHG,
    CPE,
    XRI,
    RST5,

    RP,
    POPPSW,
    JP,
    DI,
    CP,
    PUSHPSW,
    ORI,
    RST6,

    RM,
    SPHL,
    JM,
    EI,
    CM,
    CPI,
    RST7,
}

impl Opcode {
    pub fn cycles(opcode: u8) -> u8 {
        let op = Opcode::convert(opcode);
        match op {
            Self::LXIB => 3,
            Self::LXID => 3,
            Self::LXIH => 3,
            Self::LXISP => 3,
            Self::SHLD => 3,
            Self::LHLD => 3,
            Self::STA => 3,
            Self::LDA => 3,
            Self::JNZ => 3,
            Self::JMP => 3,
            Self::JP => 3,
            Self::JZ => 3,
            Self::JC => 3,
            Self::JNC => 3,
            Self::JPO => 3,
            Self::JPE => 3,
            Self::JM => 3,
            Self::CM => 3,
            Self::CP => 3,
            Self::CPE => 3,
            Self::CPO => 3,
            Self::CNC => 3,
            Self::CNZ => 3,
            Self::CZ => 3,
            Self::CC => 3,
            Self::CALL => 3,

            Self::MVIB => 2,
            Self::MVIC => 2,
            Self::MVID => 2,
            Self::MVIE => 2,
            Self::MVIH => 2,
            Self::MVIL => 2,
            Self::MVIM => 2,
            Self::MVIA => 2,
            Self::ADI => 2,
            Self::ACI => 2,
            Self::ANI => 2,
            Self::SUI => 2,
            Self::SBI => 2,
            Self::XRI => 2,
            Self::ORI => 2,
            Self::CPI => 2,
            Self::OUT => 2,
            Self::IN => 2,

            // Self::NOP => 4,
            _ => 1,
        }
    }

    pub fn convert(n: u8) -> Opcode {
        match n {
            0x00 => Opcode::NOP,
            0x01 => Opcode::LXIB,
            0x02 => Opcode::STAXB,
            0x03 => Opcode::INXB,
            0x04 => Opcode::INRB,
            0x05 => Opcode::DCRB,
            0x06 => Opcode::MVIB,
            0x07 => Opcode::RLC,

            0x08 => Opcode::NOP,
            0x09 => Opcode::DADB,
            0x0a => Opcode::LDAXB,
            0x0b => Opcode::DCXB,
            0x0c => Opcode::INRC,
            0x0d => Opcode::DCRC,
            0x0e => Opcode::MVIC,
            0x0f => Opcode::RRC,

            0x10 => Opcode::NOP,
            0x11 => Opcode::LXID,
            0x12 => Opcode::STAXD,
            0x13 => Opcode::INXD,
            0x14 => Opcode::INRD,
            0x15 => Opcode::DCRD,
            0x16 => Opcode::MVID,
            0x17 => Opcode::RAL,

            0x18 => Opcode::NOP,
            0x19 => Opcode::DADD,
            0x1a => Opcode::LDAXD,
            0x1b => Opcode::DCXD,
            0x1c => Opcode::INRE,
            0x1d => Opcode::DCRE,
            0x1e => Opcode::MVIE,
            0x1f => Opcode::RAR,

            0x20 => Opcode::NIMP(n), // RIM - special
            0x21 => Opcode::LXIH,
            0x22 => Opcode::SHLD,
            0x23 => Opcode::INXH,
            0x24 => Opcode::INRH,
            0x25 => Opcode::DCRH,
            0x26 => Opcode::MVIH,
            0x27 => Opcode::DAA, // DAA - special

            0x28 => Opcode::NOP,
            0x29 => Opcode::DADH,
            0x2a => Opcode::LHLD,
            0x2b => Opcode::DCXH,
            0x2c => Opcode::INRL,
            0x2d => Opcode::DCRL,
            0x2e => Opcode::MVIL,
            0x2f => Opcode::CMA,

            0x30 => Opcode::NIMP(n), // SIM - special
            0x31 => Opcode::LXISP,
            0x32 => Opcode::STA,
            0x33 => Opcode::INXSP,
            0x34 => Opcode::INRM,
            0x35 => Opcode::DCRM,
            0x36 => Opcode::MVIM,
            0x37 => Opcode::STC,

            0x38 => Opcode::NOP,
            0x39 => Opcode::DADSP,
            0x3a => Opcode::LDA,
            0x3b => Opcode::DCXSP,
            0x3c => Opcode::INRA,
            0x3d => Opcode::DCRA,
            0x3e => Opcode::MVIA,
            0x3f => Opcode::CMC,
            //
            0x40 => Opcode::MOVBB,
            0x41 => Opcode::MOVBC,
            0x42 => Opcode::MOVBD,
            0x43 => Opcode::MOVBE,
            0x44 => Opcode::MOVBH,
            0x45 => Opcode::MOVBL,
            0x46 => Opcode::MOVBM,
            0x47 => Opcode::MOVBA,

            0x48 => Opcode::MOVCB,
            0x49 => Opcode::MOVCC,
            0x4a => Opcode::MOVCD,
            0x4b => Opcode::MOVCE,
            0x4c => Opcode::MOVCH,
            0x4d => Opcode::MOVCL,
            0x4e => Opcode::MOVCM,
            0x4f => Opcode::MOVCA,
            //
            0x50 => Opcode::MOVDB,
            0x51 => Opcode::MOVDC,
            0x52 => Opcode::MOVDD,
            0x53 => Opcode::MOVDE,
            0x54 => Opcode::MOVDH,
            0x55 => Opcode::MOVDL,
            0x56 => Opcode::MOVDM,
            0x57 => Opcode::MOVDA,

            0x58 => Opcode::MOVEB,
            0x59 => Opcode::MOVEC,
            0x5a => Opcode::MOVED,
            0x5b => Opcode::MOVEE,
            0x5c => Opcode::MOVEH,
            0x5d => Opcode::MOVEL,
            0x5e => Opcode::MOVEM,
            0x5f => Opcode::MOVEA,
            //
            0x60 => Opcode::MOVHB,
            0x61 => Opcode::MOVHC,
            0x62 => Opcode::MOVHD,
            0x63 => Opcode::MOVHE,
            0x64 => Opcode::MOVHH,
            0x65 => Opcode::MOVHL,
            0x66 => Opcode::MOVHM,
            0x67 => Opcode::MOVHA,

            0x68 => Opcode::MOVLB,
            0x69 => Opcode::MOVLC,
            0x6a => Opcode::MOVLD,
            0x6b => Opcode::MOVLE,
            0x6c => Opcode::MOVLH,
            0x6d => Opcode::MOVLL,
            0x6e => Opcode::MOVLM,
            0x6f => Opcode::MOVLA,
            //
            0x70 => Opcode::MOVMB,
            0x71 => Opcode::MOVMC,
            0x72 => Opcode::MOVMD,
            0x73 => Opcode::MOVME,
            0x74 => Opcode::MOVMH,
            0x75 => Opcode::MOVML,
            0x76 => Opcode::HLT,
            0x77 => Opcode::MOVMA,

            0x78 => Opcode::MOVAB,
            0x79 => Opcode::MOVAC,
            0x7a => Opcode::MOVAD,
            0x7b => Opcode::MOVAE,
            0x7c => Opcode::MOVAH,
            0x7d => Opcode::MOVAL,
            0x7e => Opcode::MOVAM,
            0x7f => Opcode::MOVAA,
            //
            0x80 => Opcode::ADDB,
            0x81 => Opcode::ADDC,
            0x82 => Opcode::ADDD,
            0x83 => Opcode::ADDE,
            0x84 => Opcode::ADDH,
            0x85 => Opcode::ADDL,
            0x86 => Opcode::ADDM,
            0x87 => Opcode::ADDA,

            0x88 => Opcode::ADCB,
            0x89 => Opcode::ADCC,
            0x8a => Opcode::ADCD,
            0x8b => Opcode::ADCE,
            0x8c => Opcode::ADCH,
            0x8d => Opcode::ADCL,
            0x8e => Opcode::ADCM,
            0x8f => Opcode::ADCA,
            //
            0x90 => Opcode::SUBB,
            0x91 => Opcode::SUBC,
            0x92 => Opcode::SUBD,
            0x93 => Opcode::SUBE,
            0x94 => Opcode::SUBH,
            0x95 => Opcode::SUBL,
            0x96 => Opcode::SUBM,
            0x97 => Opcode::SUBA,

            0x98 => Opcode::SBBB,
            0x99 => Opcode::SBBC,
            0x9a => Opcode::SBBD,
            0x9b => Opcode::SBBE,
            0x9c => Opcode::SBBH,
            0x9d => Opcode::SBBL,
            0x9e => Opcode::SBBM,
            0x9f => Opcode::SBBA,
            //
            0xa0 => Opcode::ANAB,
            0xa1 => Opcode::ANAC,
            0xa2 => Opcode::ANAD,
            0xa3 => Opcode::ANAE,
            0xa4 => Opcode::ANAH,
            0xa5 => Opcode::ANAL,
            0xa6 => Opcode::ANAM,
            0xa7 => Opcode::ANAA,

            0xa8 => Opcode::XRAB,
            0xa9 => Opcode::XRAC,
            0xaa => Opcode::XRAD,
            0xab => Opcode::XRAE,
            0xac => Opcode::XRAH,
            0xad => Opcode::XRAL,
            0xae => Opcode::XRAM,
            0xaf => Opcode::XRAA,
            //
            0xb0 => Opcode::ORAB,
            0xb1 => Opcode::ORAC,
            0xb2 => Opcode::ORAD,
            0xb3 => Opcode::ORAE,
            0xb4 => Opcode::ORAH,
            0xb5 => Opcode::ORAL,
            0xb6 => Opcode::ORAM,
            0xb7 => Opcode::ORAA,

            0xb8 => Opcode::CMPB,
            0xb9 => Opcode::CMPC,
            0xba => Opcode::CMPD,
            0xbb => Opcode::CMPE,
            0xbc => Opcode::CMPH,
            0xbd => Opcode::CMPL,
            0xbe => Opcode::CMPM,
            0xbf => Opcode::CMPA,
            //
            0xc0 => Opcode::RNZ,
            0xc1 => Opcode::POPB,
            0xc2 => Opcode::JNZ,
            0xc3 => Opcode::JMP,
            0xc4 => Opcode::CNZ,
            0xc5 => Opcode::PUSHB,
            0xc6 => Opcode::ADI,
            0xc7 => Opcode::RST0,

            0xc8 => Opcode::RZ,
            0xc9 => Opcode::RET,
            0xca => Opcode::JZ,
            0xcb => Opcode::NOP,
            0xcc => Opcode::CZ,
            0xcd => Opcode::CALL,
            0xce => Opcode::ACI,
            0xcf => Opcode::RST1,
            //
            0xd0 => Opcode::RNC,
            0xd1 => Opcode::POPD,
            0xd2 => Opcode::JNC,
            0xd3 => Opcode::OUT, // OUT - special
            0xd4 => Opcode::CNC,
            0xd5 => Opcode::PUSHD,
            0xd6 => Opcode::SUI,
            0xd7 => Opcode::RST2,

            0xd8 => Opcode::RC,
            0xd9 => Opcode::NOP,
            0xda => Opcode::JC,
            0xdb => Opcode::IN, // IN - special
            0xdc => Opcode::CC,
            0xdd => Opcode::NOP,
            0xde => Opcode::SBI,
            0xdf => Opcode::RST3,
            //
            0xe0 => Opcode::RPO,
            0xe1 => Opcode::POPH,
            0xe2 => Opcode::JPO,
            0xe3 => Opcode::XTHL,
            0xe4 => Opcode::CPO,
            0xe5 => Opcode::PUSHH,
            0xe6 => Opcode::ANI,
            0xe7 => Opcode::RST4,

            0xe8 => Opcode::RPE,
            0xe9 => Opcode::PCHL,
            0xea => Opcode::JPE,
            0xeb => Opcode::XCHG,
            0xec => Opcode::CPE,
            0xed => Opcode::NOP,
            0xee => Opcode::XRI,
            0xef => Opcode::RST5,
            //
            0xf0 => Opcode::RP,
            0xf1 => Opcode::POPPSW,
            0xf2 => Opcode::JP,
            0xf3 => Opcode::DI, // DI - special
            0xf4 => Opcode::CP,
            0xf5 => Opcode::PUSHPSW,
            0xf6 => Opcode::ORI,
            0xf7 => Opcode::RST6,

            0xf8 => Opcode::RM,
            0xfa => Opcode::SPHL,
            0xf9 => Opcode::JM,
            0xfb => Opcode::EI, // EI - special
            0xfc => Opcode::CM,
            0xfd => Opcode::NOP,
            0xfe => Opcode::CPI,
            0xff => Opcode::RST7,
        }
    }
}
